version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - etl-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - etl-network

  # PostgreSQL Source Database
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - etl-network

  # Redis for caching and intermediate storage
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - etl-network

  # Kafka Connect with Debezium
  debezium:
    image: debezium/connect:2.4
    hostname: debezium
    container_name: debezium
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    volumes:
      - ./debezium/connectors:/kafka/connect/debezium-connector-postgres
    networks:
      - etl-network

  # CDC Stream Processor
  cdc-processor:
    build: 
      context: ./python
      dockerfile: Dockerfile
    container_name: cdc-processor
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - PROCESSOR_TYPE=cdc
    volumes:
      - ./python:/app
    command: python cdc_processor.py
    networks:
      - etl-network

  # Batch Processor
  batch-processor:
    build: 
      context: ./python
      dockerfile: Dockerfile
    container_name: batch-processor
    depends_on:
      - postgres
      - redis
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BATCH_INTERVAL_SECONDS=${BATCH_INTERVAL_SECONDS}
      - LOG_LEVEL=${LOG_LEVEL}
      - PROCESSOR_TYPE=batch
    volumes:
      - ./python:/app
    command: python batch_processor.py
    networks:
      - etl-network

  # Stream Processor
  stream-processor:
    build: 
      context: ./python
      dockerfile: Dockerfile
    container_name: stream-processor
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - STREAM_BUFFER_SIZE=${STREAM_BUFFER_SIZE}
      - LOG_LEVEL=${LOG_LEVEL}
      - PROCESSOR_TYPE=stream
    volumes:
      - ./python:/app
    command: python stream_processor.py
    networks:
      - etl-network

  # Mock Data Generator
  data-generator:
    build: 
      context: ./python
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MOCK_DATA_RECORDS_PER_BATCH=${MOCK_DATA_RECORDS_PER_BATCH}
      - MOCK_DATA_INTERVAL_SECONDS=${MOCK_DATA_INTERVAL_SECONDS}
      - LOG_LEVEL=${LOG_LEVEL}
      - PROCESSOR_TYPE=generator
    volumes:
      - ./python:/app
    command: python data_generator.py
    networks:
      - etl-network

volumes:
  postgres_data:
  redis_data:

networks:
  etl-network:
    driver: bridge